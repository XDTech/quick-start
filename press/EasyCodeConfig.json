{
  "author" : "Tobin",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "auto",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : { },
  "template" : {
    "auto" : {
      "name" : "auto",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name}Model;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.beans.$!{tableInfo.name}Bean;\n\nimport $!{tableInfo.savePackageName}.validation.$!{tableInfo.name}Val;\nimport $!{tableInfo.savePackageName}.beans.ResponseBean;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport cn.hutool.core.bean.BeanUtil;\nimport java.util.Optional;\nimport org.springframework.validation.annotation.Validated;\n\nimport jakarta.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($tableInfo.name)\")\n@Validated  //单参数校验时我们需要，在方法的类上加上@Validated注解，否则校验不生效。\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     * @return 查询结果\n     */\n    @GetMapping(\"/page/list\")\n    public ResponseEntity<?> get$!{tableInfo.name}PageList (@RequestParam Integer pi,@RequestParam Integer ps) {\n    \n    \n      Page<$!{tableInfo.name}Model> $!{tool.firstLowerCase($tableInfo.name)}List = this.$!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}PageList(pi,ps);\n      \n      return ResponseEntity.ok(ResponseBean.createResponseBean($!{tool.firstLowerCase($tableInfo.name)}List.getTotalElements(),$!{tool.firstLowerCase($tableInfo.name)}List.getContent()));\n      \n     \n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> get$!{tableInfo.name}(@PathVariable(\"id\") Long id) {\n    \n       Optional<$!{tableInfo.name}Model>  $!{tool.firstLowerCase($tableInfo.name)}Model = this.$!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}(id);\n        if ($!{tool.firstLowerCase($tableInfo.name)}Model.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"数据不存在\");\n        }\n         return ResponseEntity.ok(ResponseBean.createResponseBean($!{tool.firstLowerCase($tableInfo.name)}Model.get()));\n\n    }\n\n    /**\n     * 新增数据\n     *\n    * @param $!{tool.firstLowerCase($tableInfo.name)}Val, 实体\n     * @return 新增结果\n     */\n    @PostMapping\n    public ResponseEntity<?> create$!{tableInfo.name}(\n       @RequestBody @Validated($!{tableInfo.name}Val.Create.class) $!{tableInfo.name}Val $!{tool.firstLowerCase($tableInfo.name)}Val\n    ) {\n\n       \n\n       $!{tableInfo.name}Model $!{tool.firstLowerCase($tableInfo.name)}Model =new $!{tableInfo.name}Model();\n       BeanUtil.copyProperties($!{tool.firstLowerCase($tableInfo.name)}Val, $!{tool.firstLowerCase($tableInfo.name)}Model);\n       return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.create$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Model));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Val 实体\n     * @return 编辑结果\n     */\n    @PutMapping\n    public ResponseEntity<?> update$!{tableInfo.name}(\n @RequestBody @Validated($!{tableInfo.name}Val.Update.class) $!{tableInfo.name}Val $!{tool.firstLowerCase($tableInfo.name)}Val\n    ) {\n      \n     Optional<$!{tableInfo.name}Model>  $!{tool.firstLowerCase($tableInfo.name)}Optional =this.$!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Val.getId());\n        if ($!{tool.firstLowerCase($tableInfo.name)}Optional.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"数据不存在\");\n        }\n        \n     $!{tableInfo.name}Model $!{tool.firstLowerCase($tableInfo.name)}Model =new $!{tableInfo.name}Model();\n       BeanUtil.copyProperties($!{tool.firstLowerCase($tableInfo.name)}Val,$!{tool.firstLowerCase($tableInfo.name)}Model,\"createdAt\",\"updatedAt\",\"status\",\"deleted\");\n      \n      \n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Model));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<?> delete$!{tableInfo.name}ById(@PathVariable(\"id\") Long  id) {\n    \n     Optional<$!{tableInfo.name}Model>  $!{tool.firstLowerCase($tableInfo.name)}Model = this.$!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}(id);\n        if ($!{tool.firstLowerCase($tableInfo.name)}Model.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"数据不存在\");\n        }\n    \n    this.$!{tool.firstLowerCase($tableInfo.name)}Service.delete$!{tableInfo.name}(id);\n        return ResponseEntity.ok().build();\n    }\n\n}\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name}Model;\nimport $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repo;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport jakarta.annotation.Resource;\nimport jakarta.persistence.criteria.CriteriaBuilder;\nimport jakarta.persistence.criteria.CriteriaQuery;\nimport jakarta.persistence.criteria.Predicate;\nimport jakarta.persistence.criteria.Root;\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})服务\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Service\npublic class $!{tableName} {\n\n@Resource\nprivate $!{tableInfo.name}Repo $!tool.firstLowerCase($!{tableInfo.name})Repo;\n   \n   \n   @Transactional\n   public $!{tableInfo.name}Model create$!{tableInfo.name}($!{tableInfo.name}Model $!tool.firstLowerCase($tableInfo.name)Model){\n    return this.$!{tool.firstLowerCase($tableInfo.name)}Repo.save($!tool.firstLowerCase($tableInfo.name)Model);\n   }\n   \n   @Transactional\n   public $!{tableInfo.name}Model update$!{tableInfo.name}($!{tableInfo.name}Model $!tool.firstLowerCase($tableInfo.name)Model){\n    return this.$!{tool.firstLowerCase($tableInfo.name)}Repo.save($!tool.firstLowerCase($tableInfo.name)Model);\n   }\n   \n   @Transactional\n   public void delete$!{tableInfo.name}($!{tableInfo.name}Model $!tool.firstLowerCase($tableInfo.name)Model){\n     this.$!{tool.firstLowerCase($tableInfo.name)}Repo.delete($!tool.firstLowerCase($tableInfo.name)Model);\n   }\n   \n    @Transactional\n   public void delete$!{tableInfo.name}(Long id){\n     this.$!{tool.firstLowerCase($tableInfo.name)}Repo.deleteById(id);\n   }\n   \n   \n    public Optional<$!{tableInfo.name}Model> get$!{tableInfo.name}(Long id) {\n        return this.$!{tool.firstLowerCase($tableInfo.name)}Repo.findById(id);\n    }\n   \n      // 分页查询\n    public Page<$!{tableInfo.name}Model> get$!{tableInfo.name}PageList(Integer pi, Integer ps) {\n       // Sort sort = Sort.by(Sort.Direction.DESC, \"createdAt\");\n        PageRequest pageRequest = PageRequest.of(pi-1, ps);\n        Specification<$!{tableInfo.name}Model> specification = new Specification<$!{tableInfo.name}Model>() {\n            /**\n             *\n             */\n\n            @Override\n            public Predicate toPredicate(Root<$!{tableInfo.name}Model> root, CriteriaQuery<?> query, CriteriaBuilder cb) {\n                // 用于暂时存放查询条件的集合\n                List<Predicate> predicatesList = new ArrayList<>();\n                // --------------------------------------------\n     // 模糊查询\n                 /**\n                if (!StrUtil.isEmpty(username)) {\n                    predicatesList.add(cb.like(root.get(\"username\"), \"%\" + username + \"%\"));\n                }\n                if (!StrUtil.isEmpty(status)) {\n                    predicatesList.add(cb.equal(root.get(\"status\"), UserStatusEnum.valueOf(status)));\n                }\n                **/\n                predicatesList.add(cb.equal(root.get(\"deleted\"), false));// 查询没有删除的\n                Predicate[] p = new Predicate[predicatesList.size()];\n                query.where(predicatesList.toArray(p));\n                query.orderBy(cb.desc(root.get(\"createdAt\")));\n                return query.getGroupRestriction();\n            }\n\n        };\n      return this.$!{tool.firstLowerCase($tableInfo.name)}Repo.findAll(specification, pageRequest);\n        \n    }\n}"
      }, {
        "name" : "bean.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/beans\", \"Bean.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"beans\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@Data\npublic class $!{tableInfo.name}Bean {\n\n\n#foreach($column in $tableInfo.fullColumn)\n #if(${column.name}!=\"createdAt\" && ${column.name}!=\"updatedAt\" && ${column.name}!=\"deleted\")\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n #end\n#end\n\n\n}\n"
      }, {
        "name" : "repository.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Repo\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/repository\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;\n\nimport $!{tableInfo.savePackageName}.model.$!{tableInfo.name}Model;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Repository\npublic interface $!{tableName} extends JpaRepository<$!{tableInfo.name}Model, Long> , JpaSpecificationExecutor<$!{tableInfo.name}Model> {\n\n}"
      }, {
        "name" : "val.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/validation\", \"Val.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"validation\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport jakarta.validation.groups.Default;\n##表注释（宏定义）\n#tableComment(\"表验证类\")\n@Data\npublic class $!{tableInfo.name}Val {\n\n    //@NotBlank(message = \"username can not be null\")\n    //private String username;\n\n    @NotNull(message = \"id can not be null\", groups = Update.class)\n    private Long id;\n#foreach($column in $tableInfo.fullColumn)\n #if(${column.name}!=\"createdAt\" && ${column.name}!=\"updatedAt\" && ${column.name}!=\"deleted\" && ${column.name}!=\"id\" )\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n #end\n#end\n\n\n    public interface Create extends Default {\n\n    }\n\n    public interface Update extends Default {\n\n    }\n\n}\n"
      } ]
    }
  },
  "columnConfig" : { },
  "globalConfig" : { }
}